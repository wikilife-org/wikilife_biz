# coding=utf-8

from wikilife_biz.services.user.profile_service import ProfileServiceException
from wikilife_biz.services.user.user_service import UserServiceException
from wikilife_utils.formatters.date_formatter import DateFormatter

DEFAULT_GENDER = None
DEFAULT_BIRTHDATE = "1970-01-01 00:00:00 -0000"
DEFAULT_HEIGHT = 1.0
DEFAULT_WEIGHT = 1.0
DEFAULT_COUNTRY = None
DEFAULT_REGION = None
DEFAULT_CITY = None
DEFAULT_SOURCE = "AccountService"


class AccountServiceException(Exception):
    pass


class AccountService(object):
    """
    Public Business Service
    """

    _user_srv = None
    _profile_srv = None

    def __init__(self, logger, user_service, profile_service):
        self._logger = logger
        self._user_srv = user_service
        self._profile_srv = profile_service

    def get_account(self, user_id):
        user = self._user_srv.get_user_by_id(user_id)
        profile = self._profile_srv.get_profile_by_user_id(user_id)

        account = {}
        account["userName"] = user["userName"]
        account["status"] = user["status"]
        account["profile"] = {}

        if profile != None: 
            account["profile"]["updateUTC"] = DateFormatter.to_datetime_utc(profile["updateUTC"])
            account["profile"]["items"] = profile["items"]

        return account

    def _get_dto_field(self, dto, field, default):
        return dto[field] if field in dto and dto[field]!=None else default 

    def create_account(self, account_dto):
        """
        Creates an account for a new user.
        account_dto: Dictionary
        {
            "timezone":"US/Central", M,
            "birthdate":"1994-02-21 00:00:00", M
            "gender":"Male", M
            "height":"1.70", M
            "weight":"70.0", M
            "user_name":"joaquin", M
            "pin":"4449" M
            "city":"Avellaneda", OPT
            "region":"Buenos Aires", OPT
            "country":"ARG", OPT
        }

        Returns: created_user
        Raises: AccountServiceException
        """

        try:
            user_tz_name = str(self._get_dto_field(account_dto, "timezone", None))
            pin = self._get_dto_field(account_dto, "pin", None)
            user_name = self._get_dto_field(account_dto, "userName", None)
            gender = self._get_dto_field(account_dto, "gender", DEFAULT_GENDER)
            birthdate = self._get_dto_field(account_dto, "birthdate", DEFAULT_BIRTHDATE)
            height = float(self._get_dto_field(account_dto, "height", DEFAULT_HEIGHT))
            weight = float(self._get_dto_field(account_dto, "weight", DEFAULT_WEIGHT))
            country = self._get_dto_field(account_dto, "country", DEFAULT_COUNTRY)
            region = self._get_dto_field(account_dto, "region", DEFAULT_REGION)
            city = self._get_dto_field(account_dto, "city", DEFAULT_CITY)
            source = self._get_dto_field(account_dto, "source", DEFAULT_SOURCE)

            created_user_id = self._user_srv.add_user(user_name, pin)
            self._profile_srv.add_profile(created_user_id, user_tz_name, source, birthdate, height, weight, gender, country, region, city)

            return created_user_id

        except UserServiceException, e:
            raise AccountServiceException(e)

        #except ProfileServiceException, e:
        except Exception, e:
            self._user_srv.remove_user(created_user_id)
            raise AccountServiceException(e)

    def create_autogenerated_account(self, user_name_prefix=""):
        """
        Creates an account for an autogenerated user.
        user_name_prefix="": String

        Returns: created_user
        Raises: AccountServiceException
        """

        try:
            user_tz_name = "UTC"
            created_user_id = self._user_srv.add_autogenerated_user(user_name_prefix)
            self._profile_srv.add_profile(created_user_id, user_tz_name, DEFAULT_BIRTHDATE, DEFAULT_HEIGHT, DEFAULT_WEIGHT, DEFAULT_GENDER, DEFAULT_COUNTRY, DEFAULT_REGION, DEFAULT_CITY, DEFAULT_SOURCE)

            return created_user_id

        except UserServiceException, e:
            raise AccountServiceException(e)

        except ProfileServiceException, e:
            self._user_srv.remove_user(created_user_id)
            raise AccountServiceException(e)

    def delete_account(self, user_id):
        self._user_srv.remove_user(user_id)
        self._profile_srv.remove_profile_by_user_id(user_id)
