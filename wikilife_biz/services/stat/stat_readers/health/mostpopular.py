# coding=utf-8

from wikilife_biz.services.stat.stat_readers.base_stat_reader import BaseStatReader
from wikilife_utils.date_utils import DateUtils


class BaseGlobalMostPopularReader(BaseStatReader):

    NODE_IDS = None

    def read_stat(self):
        nodes = []
        meta_nodes = self._daos.meta_dao.get_nodes_by_ids(self.NODE_IDS)

        for n in meta_nodes:
            nodes.append({"id": n._id, "name": n.name, "per": 0})

        return {
         "data": nodes
        }


class BaseUserMostPopularReader(BaseStatReader):

    def read_stat(self, user_id):
        to_date = DateUtils.get_datetime_utc()
        from_date = DateUtils.add_months(to_date, -12)

        where = {}
        where["userId"] = user_id
        where["nodeId"] = {"$in": self.NODE_IDS}
        where["metricId"] = self.METRIC_ID
        where["date"] = {'$gte' : from_date, '$lt' : to_date}

        dao = self._daos.aggregation_dao
        nodes = []
        complaint_ids = []

        for item in dao._collection_numeric.find(where):
            if not item["nodeId"] in complaint_ids:
                complaint_ids.append(item["nodeId"])  

        meta_nodes = self._daos.meta_dao.get_nodes_by_ids(complaint_ids)
        for n in meta_nodes:
            nodes.append({"id": n._id, "name": n.name, "per": 0})     

        return {
         "data": nodes
        }


### Complaints ###

class GlobalComplaintsReader(BaseGlobalMostPopularReader):
    NODE_IDS = [2510,2512,2514,2516,2518,2520,2522,2524,2528,2530,2532,2536,2538,2540,2542,2544,2550,2552,2554,2556,2562,2564,2567,2570,2573,2576,2579,2582,2585,2588,2591,2594,2597,2600,2603,2606,2608,2611,2614,2617,2620,2623,2626,2629,2632,2635,2638,2641,2644,2647,2650,2652,2654,2656,2671,2673,2675,2678,2680,2682,2684,2686,2691,2694,2696,2700,2702,2706,2708,2710,2712,2714,2716,2718,2720,2722,2724,2726,2728,2730,2732,2734,2736,2740,2742,2744,2746,2748,2750,2752,2760,2762,2764,2767,2770,2780,2782,2784,2786,2788,2790,2792,2796,2799,2804,2806,2808,2810,2812,2818,2820,2824,2826,2833,2838,2841,2847,2851,2857,2859,2861,2863,2868,2871,2873,2875,2880,2882,2884,2888,2894,2896,2902,2904,2906,2908,2910,2912,2914,2916,2918,2920,2922,2924,2926,2928,2930,2932,2934,2936,2938,2940,2942,2944,2946,2948,2950,2953,2962,2964,2966,2968,2973,2975,2977,2980,2982,2984,2987,2990,2992,2998,3004,3010,3012,3036,3040,3044,3049,3060,3064,3066,3069,3074,3076,3079,3081,3083,3085,3087,3089,3094,3096,3098,3109,3111,3113,3115,3121,3128,3130,3132,3135,3137,3139,3141,3146,3148,3150,3153,3155,3157,3160,3162,3164,3170,3174,3176,3178,3180,3182,3185,3187,3189,3191,3193,3195,3197,3200,3203,3206,3209,3212,3214,3216,3218,3220,3222,3224,3226,3228,3230,3236,3242,3244,3246,3251,3255,3259,3272,3274,3279,3281,3285,3287,3289,3293,3296,3299,3302,3307,3312,3316,3318,3320,3322,3324,3326,3330,3332,3338,3340,3344,3346,3350,3352,3355,3359,3361,3363,3368,3370,3372,3377,3381,3383,3385,3387,3389,3391,3393,3395,3397,3399,3401,3407,3409,3411,3413,3415,3418,3423,3427,3429,3434,3436,3438,3440,3442,3444,3446,3449,3451,3453,3455,3459,3461,3464,3467,3469,3474,3476,3478,3480,3482,3485,3488,3491,3493,3495,3497,3499,3503,3505,3507,3509,3511,3513,3516,3519,3521,3523,3525,3527,3530,3536,3538,3540,3542,3544,3546,3549,3556,3558,3566,3568,3570,3572,3574,3578,3580,3584,3586,3588,3590,3592,3596,3598,3600,3602,3604,3606,3608,3611,3613,3615,3617,3621,3623,3625,3627,3631,3633,3635,3637,3639,3641,3643,3645,3649,3651,3653,3655,3657,3660,3663,3666,3668,3670,3672,3674,3676,3678,3680,3688,3690,3692,3694,3696,3698,3700,3702,3708,3712,3719,3721,3723,3725,3727,3729,3732,3734,3736,3738,3740,3742,3744,3746,3749,3751,3753,3758,3760,3762,3764,3766,3768,3772,3774,3776,3778,3780,3782,3784,3786,3788,3790,3792,3794,3796,3798,3800,3804,3806,3808,3810,3812,3814,3816,3818,3820,3822,3830,3832,3834,3838,3844,3846,3848,3850,3852,3854,3856,3858,3860,3865,3867,3869,3871,3873,3875,3877,3880,3882,3885,3887,3889,3891,3893,3895,3897,3909,3911,3913,3917,3919,3927,3929,3933,3935]


class UserComplaintsReader(BaseUserMostPopularReader):
    NODE_IDS = GlobalComplaintsReader.NODE_IDS
    METRIC_ID = 2511


### Conditions ###

class GlobalConditionsReader(BaseGlobalMostPopularReader):
    NODE_IDS = []


class UserConditionsReader(BaseUserMostPopularReader):
    NODE_IDS = GlobalConditionsReader.NODE_IDS
    METRIC_ID = 0
